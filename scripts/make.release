#!/bin/bash


PWD=$(pwd)
echo $PWD | grep -q ACQ400_ESW_TOP
if [ $? -eq 0 ]; then
	BROI=../acq400_buildroot/output/images/
	if [ -e $BROI ]; then
		echo ACQ400_ESW_TOP build with buildroot at $BROI
		ARB=../acq400_kernel/arch/arm/boot
		[ -e $ARB/uImage ] || (echo ERROR $ARB/uImage not found; exit 1)
		ACQ400DRV=../ACQ400DRV
		[ -e $ACQ400DRV ] || (echo ERROR $ACQ400DRV not found; exit 1)
		RELCORE_SFX=-$(hostname)
	else
		echo ERROR $BROI not found
		exit 1
	fi
else
	echo Running local release. scripts/make.release.staffa3 preferred.
	echo Are you sure \?
	read yn
	[ "x$yn" != 'xy' ] && [ "x$yn" != "xY" ] && exit 1
	BROI=./DEFIMAGES
	if [ -e $BROI ]; then
		ARB=../linux-xlnx/arch/arm/boot
		ACQ400DRV=../ACQ420FMC
		echo build with DEFIMAGES
	else
		echo ERROR DEFIMAGES not found
		exit 1
	fi
fi

DC=$(date +%Y%m%d%H%M%S)

echo "FETCHING IMAGES FROM BROI $BROI"

CP="cp -v"
GIT=${GIT:-y}

# subdirectories on target
MNTDIRS="bin boot.d dtb.d fpga.d local packages packages.opt ko"
# list of .dtb names to include
ARCHDTB="\
acq1001 acq1002 acq1002p acq1002r acq1002w acq400_uart0 
acq2106d37 acq2106 acq2106sfp acq2106d37sfp acq210612 
acq2106_quadcomms_overlay acq2106_hudp_overlay
acq2106_1000X_overlay acq2106_sc_overlay
acq400_usb_host_overlay acq400_usb_otg_overlay acq400_usb_peripheral_overlay
acq2106_acq435elfx_sc_overlay
acq2206 acq2206sfp
acq400dsp1_overlay acq400dsp2_overlay
acq1014 kmcu kmcuz30 kmcuz30_bpe z7io z7io_cpld_overlay
mgt482_sfp1_overlay mgt482_sfp2_overlay mgt482_sfp3_overlay mgt482_sfp4_overlay
acq2x06_di460_overlay
acq2006 acq2006b acq2006bEU"


die() {
	echo ERROR $*
	exit 1
}

cpwarn() {
	src=$1 dst=$2
	if [ -e $src ]; then
		$CP $src $dst
	else
		if [ -e $dst/$(basename $src) ]; then
			echo "WARNING $src did not exist, using old version:"
		else
			echo "ERROR: we cannot live without $src"
			exit 1
		fi
	fi
}

pull_sources()
{
rm -Rf MNT
for dir in $MNTDIRS; do mkdir -p MNT/$dir; done
cpwarn $ARB/uImage 				MNT
cpwarn $BROI/uramdisk.image.gz 			MNT
cpwarn $BROI/rootfs.ext2.gz			MNT


cpwarn $ACQ400DRV/packageko*img			MNT/ko

$CP ../PACKAGES/* MNT/packages
$CP ../PACKAGES.OPT/* MNT/packages.opt
mv MNT/packages/*custom* MNT/packages.opt
$CP tgt_scripts/* MNT/bin
$CP boot.d/* MNT/boot.d
for arch in $ARCHDTB; do cpwarn $ARB/dts/$arch.dtb MNT/dtb.d; done
}

[ "$(whoami)" = "root" ] && die "do not run as root"



VER=1

mkdir -p OPT/ko

if [ -e .master_version_host ] && [ "x$(cat .master_version_host)" = "x$(hostname)" ]; then
	[ -e .version ] && VER=$(($(cat .version)+1))
	echo $VER >.version
	VER=$(printf %03d $VER)
	echo "This host $(hostname) IS master_version_host INCREMENT VER to $VER"
	MVHOST=1
	pull_sources
	./scripts/copy-fpga-from-git >/dev/null
	for old in $(cat redundant_fpgas); do
		rm -v MNT/fpga.d/$old
	done
else
	[ -e .version ] && VER=$(($(cat .version)))
	VER=$(printf %03d $VER)
	echo "This host $(hostname) IS NOT master_version_host VER set  $VER"
	MVHOST=0
	pull_sources
	ls -l OPT/ko
	found_img=none
	for img in OPT/ko/*.img; do
		_found=$(echo $img | grep $VER)  && found_img=$_found
		if [ $found_img != none ]; then
			echo "FOUND IMAGE: $found_img"
			break
		fi
	done
	if [ "$found_img" = "none" ]; then
		cat - <<EOF
ERROR FPGA image not found. Please download suitable image from RELEASE

eg from https://github.com/D-TACQ/ACQ400RELEASE/releases/tag/v$VER

if building for a specific carrier (z7io, acq100x, acq2x06):
eg acq2x06_fpga-584-20230405215151.img

if building a universal image:
eg https://github.com/D-TACQ/ACQ400RELEASE/releases/download/v584/fpga-584-20230405215151.img

store in ./OPT/ko, after removing any previous images
eg 
(
	DT=https://github.com/D-TACQ/
	FPGA=$DT/ACQ400RELEASE/releases/download/v584/fpga-584-20230405215151.img
	cd ./OPT/ko; 
	wget $FPGA
EOF
		exit 1
	fi
fi




RELCORE=$VER-$DC$RELCORE_SFX
SERVAC=dt100@eigg:/home/dt100/PROJECTS/ACQ400/RELEASE/REL

if [ $MVHOST -eq 1 ]; then
	RELNAME=acq400-$VER-$DC
	echo Enter comment for version $VER
	sleep 1
	vi RELEASENOTES
	mv RELEASENOTES RELEASENOTES.bak

	echo "-- RELEASE $RELNAME --" > RELEASENOTES
	cat RELEASENOTES.bak >> RELEASENOTES
	rm RELEASENOTES.bak
	if [ "$GIT" = "y" ]; then
	       git commit -m $VER .version RELEASENOTES
	fi

	./scripts/make_compatible_fpga_links.py >make_links
	chmod a+rx make_links
	./make_links
	mkdir -p OPT/ko; rm -Rf OPT/ko/*
	mksquashfs MNT/fpga.d/* OPT/ko/fpga-$VER-$DC.img 2>&1 >squashfs.log
	mksquashfs MNT/fpga.d/Z7IO_TOP* OPT/ko/z7io_fpga-$VER-$DC.img 2>&1 >>squashfs.log
	mksquashfs MNT/fpga.d/ACQ10??_TOP* OPT/ko/acq10xx_fpga-$VER-$DC.img 2>&1 >>squashfs.log
	mksquashfs MNT/fpga.d/ACQ2?06_TOP* OPT/ko/acq2x06_fpga-$VER-$DC.img 2>&1 >>squashfs.log
	(cd OPT/ko; find -L . -type f -exec md5sum {} \; ) > fpga.sums
else
	RELNAME=acq400-$RELCORE
fi

cp RELEASENOTES MNT/RELEASENOTES
(cd MNT; find -L . -type f -exec md5sum {} \; ) >acq400.sums
cat - >MNT/VERSION <<EOF
RELEASE $RELNAME
RELHOST $(whoami)@$(hostname)
$(sort -k 2 acq400.sums)
EOF

[ -e fpga.sums ] && cat - >MNT/FPGA_VER <<EOF
RELEASE $RELNAME
RELHOST $(whoami)@$(hostname)
$(sort -k 2 fpga.sums)
EOF

mkdir -p REL
for img in OPT/ko/*.img; do
	[ -e $img ] && mv $img REL
done

tar cvf REL/$RELNAME.tar -C MNT --exclude=*.bit.gz .
tar tvf REL/$RELNAME.tar > acq400.manifest

if [ $MVHOST -eq 1 ]; then
	git commit -m $VER acq400.manifest
	if [ "$GIT" = "y" ]; then
		git tag V$VER
		git push origin
		git push --tags
	fi

	(cd REL;rm -f acq4xx-current; ln -s $RELNAME.tgz acq4xx-current)
	echo scp REL/$RELNAME.tar REL/fpga-$VER-$DC.img $SERVAC
	echo ssh dt100@eigg /home/dt100/bin/set.acq4xx.current $RELNAME.tar
	echo publish
	(cd REL; sha1sum $RELNAME.tar fpga-$VER-$DC.img )
	echo scp REL/$RELNAME.tgz dtacq@margum.pair.com:public_html/swrel
else
	cp $found_img REL
	echo RELEASE COMPLETE:
	ls -l REL/*$VER-$DC* REL/$(basename $found_img)
fi
